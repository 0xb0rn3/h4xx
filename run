#!/usr/bin/env bash
# H4xx - Kali Linux Security Tools Installation Suite
# Version: 0.1-ALFA
# Author: 0xb0rn3
# GitHub: https://github.com/0xb0rn3
# Purpose: Automated installation and configuration of Kali Linux security tools
# License: MIT
# Warning: Use only for legitimate security research and testing on authorized systems

# Enable strict error handling for better security
set -euo pipefail

# Configuration variables
BACKUP_DIR="/root/kali_install_backups"
LOG_FILE="/root/kali_install.log"
MENU_PACKAGE="kali-menu"

# Define color codes for visual formatting
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'    # No Color
BOLD='\033[1m'

# Progress animation characters for visual feedback
SPINNER="⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"

# Display the tool's banner and information
display_banner() {
    clear_screen
    echo -e "${BLUE}"
    cat << "EOF"
██╗  ██╗██╗  ██╗██╗  ██╗██╗  ██╗
██║  ██║██║  ██║╚██╗██╔╝╚██╗██╔╝
███████║███████║ ╚███╔╝  ╚███╔╝ 
██╔══██║╚══███║ ██╔██╗  ██╔██╗ 
██║  ██║   ██║██╔╝ ██╗██╔╝ ██╗
╚═╝  ╚═╝   ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝
EOF
    echo -e "${NC}"
    echo -e "${YELLOW}=== Kali Linux Tools Installation Suite ===${NC}"
    echo -e "${BLUE}Version${NC}: ${GREEN}0.1-ALFA${NC}"
    echo -e "${BLUE}Author${NC}: ${GREEN}0xb0rn3${NC}"
    echo -e "${BLUE}GitHub${NC}: ${GREEN}https://github.com/0xb0rn3${NC}"
    echo -e "${BLUE}Tool Name${NC}: ${GREEN}H4xx${NC}"
    echo -e "\n${YELLOW}====================================${NC}\n"
}

# Progress spinner animation for long-running tasks
show_spinner() {
    local pid=$1
    local message=$2
    local i=0
    local delay=0.1
    
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i + 1) % ${#SPINNER} ))
        printf "\r${BLUE}${SPINNER:$i:1}${NC} %s" "$message"
        sleep $delay
    done
    wait $pid
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        printf "\r${GREEN}✓${NC} %s\n" "$message"
    else
        printf "\r${RED}✗${NC} %s\n" "$message"
        return $exit_code
    fi
}

# Status message functions
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1"; }
info() { echo -e "${BLUE}ℹ${NC} $1"; }
warn() { echo -e "${YELLOW}⚠${NC} $1"; }

# Repository existence checker
check_repo_exists() {
    local repo_url=$1
    local repo_name=$2
    
    if [ -d "$repo_name" ]; then
        info "Repository $repo_name already exists. Updating..."
        (cd "$repo_name" && git pull) &
        show_spinner $! "Updating $repo_name"
        return 0
    fi
    return 1
}

# Logging function with version information
log() {
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[H4xx v0.1-ALFA][$timestamp] $1" >> "$LOG_FILE"
}

# Enhanced error handling
handle_error() {
    local error_msg="$1"
    local line_num="${2:-unknown}"
    error "$error_msg (Line: $line_num)"
    log "ERROR: $error_msg (Line: $line_num)"
    
    if [ -f "${BACKUP_DIR}/sources.list" ]; then
        warn "Attempting to restore original sources.list..."
        cp "${BACKUP_DIR}/sources.list" /etc/apt/sources.list
        success "Restored original sources.list"
    fi
    
    exit 1
}

# Set up error trap
trap 'handle_error "An unexpected error occurred" $LINENO' ERR

# Clear screen with banner
clear_screen() {
    echo -e "\033[2J\033[H"
    display_banner
}

# Perform initial security checks
security_checks() {
    info "Performing security checks..."
    
    # Root privilege check
    if [ "$EUID" -ne 0 ]; then 
        handle_error "Please run as root" "$LINENO"
    fi
    success "Root privileges verified"

    # System compatibility check
    if [ ! -f "/etc/debian_version" ]; then
        handle_error "This script is for Debian-based systems only" "$LINENO"
    fi
    success "Debian-based system verified"

    # Disk space check
    local available_space
    available_space=$(df -BG / | awk 'NR==2 {print $4}' | sed 's/G//')
    if [ "$available_space" -lt 20 ]; then
        handle_error "Insufficient disk space. At least 20GB required" "$LINENO"
    fi
    success "Sufficient disk space verified (${available_space}GB available)"
}

# Create backup of system configuration
setup_backup() {
    info "Setting up backup directory..."
    (
        mkdir -p "$BACKUP_DIR"
        cp /etc/apt/sources.list "${BACKUP_DIR}/sources.list"
    ) &
    show_spinner $! "Creating backup of system configuration"
    log "Created backup of sources.list at ${BACKUP_DIR}/sources.list"
}

# Configure Kali repository
add_kali_repo() {
    info "Configuring Kali repository..."
    
    if grep -q "kali-rolling" /etc/apt/sources.list; then
        success "Kali repository already configured"
        return 0
    fi
    
    (echo "deb http://http.kali.org/kali kali-rolling main contrib non-free non-free-firmware" >> /etc/apt/sources.list) &
    show_spinner $! "Adding Kali repository"
    
    info "Importing Kali GPG key..."
    if ! apt-key list | grep -q "Kali Linux Repository"; then
        (
            wget -q -O - https://archive.kali.org/archive-key.asc | gpg --import - &&
            gpg --export 44C6513A8E4FB3D30875F758ED444FF07D8D0BF6 | apt-key add -
        ) &
        show_spinner $! "Importing and verifying GPG key"
        success "GPG key imported and verified"
    else
        success "GPG key already present"
    fi
}

# Define available tool categories
declare -A categories=(
    ["kali-tools-information-gathering"]="Network scanning and enumeration tools"
    ["kali-tools-vulnerability"]="Vulnerability assessment tools"
    ["kali-tools-web"]="Web application testing tools"
    ["kali-tools-database"]="Database assessment tools"
    ["kali-tools-passwords"]="Password attacks and cracking tools"
    ["kali-tools-wireless"]="Wireless network testing tools"
    ["kali-tools-reverse-engineering"]="Reverse engineering tools"
    ["kali-tools-exploitation"]="Exploitation tools"
    ["kali-tools-social-engineering"]="Social engineering tools"
    ["kali-tools-sniffing-spoofing"]="Network sniffing and spoofing tools"
    ["kali-tools-post-exploitation"]="Post exploitation tools"
    ["kali-tools-forensics"]="Digital forensics tools"
    ["kali-tools-reporting"]="Report generation tools"
    ["kali-tools-crypto-stego"]="Cryptography and steganography tools"
    ["kali-tools-hardware"]="Hardware security tools"
    ["kali-tools-fuzzing"]="Fuzzing tools"
)

# Install required base packages
install_base_requirements() {
    info "Installing base requirements..."
    (
        DEBIAN_FRONTEND=noninteractive apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install -y \
            net-tools \
            network-manager \
            kde-plasma-desktop \
            iptables \
            "linux-headers-$(uname -r)" \
            "$MENU_PACKAGE"
    ) &
    show_spinner $! "Installing base system requirements"
}

# Install Kali tool categories
install_categories() {
    info "Installing Kali tool categories..."
    for category in "${!categories[@]}"; do
        info "Installing: ${category} - ${categories[$category]}"
        (DEBIAN_FRONTEND=noninteractive apt-get install -y "$category") &
        show_spinner $! "Installing ${category}"
    done
}

# Set up additional components
handle_additional_repos() {
    info "Setting up additional components..."
    
    # KDE Debloat installation
    if ! check_repo_exists "https://github.com/0xb0rn3/kde-DBlot" "kde-DBlot"; then
        (git clone https://github.com/0xb0rn3/kde-DBlot) &
        show_spinner $! "Cloning KDE Debloat repository"
    fi
    
    (
        cd kde-DBlot || handle_error "Failed to enter kde-DBlot directory" "$LINENO"
        chmod +x run
        ./run
    ) &
    show_spinner $! "Running KDE Debloat script"
    
    # AnonSurf installation
    if ! check_repo_exists "https://github.com/Und3rf10w/kali-anonsurf.git" "kali-anonsurf"; then
        (git clone https://github.com/Und3rf10w/kali-anonsurf.git) &
        show_spinner $! "Cloning AnonSurf repository"
    fi
    
    (
        cd kali-anonsurf || handle_error "Failed to enter kali-anonsurf directory" "$LINENO"
        ./installer.sh
    ) &
    show_spinner $! "Installing AnonSurf"
}

# Create installation documentation
create_documentation() {
    info "Creating installation documentation..."
    (
    cat > "/root/kali_installation_report.md" << EOF
# H4xx - Kali Linux Tools Installation Report

## Tool Information
- Name: H4xx
- Version: 0.1-ALFA
- Author: 0xb0rn3
- GitHub: https://github.com/0xb0rn3

## Installation Details
- Date: $(date)
- System: $(uname -a)
- Backup Location: ${BACKUP_DIR}

## Installed Categories
$(for category in "${!categories[@]}"; do
    echo "- **${category}**: ${categories[$category]}"
done)

## Additional Components
- KDE Debloat utilities
- AnonSurf privacy tools
- Kali menu integration

## Usage Notes
1. AnonSurf can be used with \`anonsurf -h\` for anonymity features
2. All tools are installed for legitimate security testing only
3. Backup of original configuration is stored in ${BACKUP_DIR}

## Security Notice
These tools are intended for security research and educational purposes only.
Use responsibly and exclusively on systems you own or have explicit permission to test.

## Logs
Detailed installation logs can be found at: ${LOG_FILE}
EOF
    ) &
    show_spinner $! "Creating installation report"
}

# Main execution function
main() {
    clear_screen
    info "Starting H4xx Kali tools installation..."
    
    security_checks
    setup_backup
    add_kali_repo
    install_base_requirements
    install_categories
    handle_additional_repos
    
    info "Performing system cleanup..."
    (
        apt-get autoremove -y
        apt-get clean
    ) &
    show_spinner $! "Cleaning up system"
    
    create_documentation
    success "Installation completed successfully!"
    
    info "Installation report saved to /root/kali_installation_report.md"
    info "Use 'anonsurf -h' to view anonymity features"
}

# Execute main function
main

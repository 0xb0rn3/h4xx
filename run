#!/usr/bin/env bash
# H4xx - Kali Linux Security Tools Installation Suite
# Version: 0.1-BETA
# Author: 0xb0rn3
# GitHub: https://github.com/0xb0rn3
# Purpose: Automated installation and configuration of Kali Linux security tools
# License: MIT
# Warning: Use only for legitimate security research and testing on authorized systems

# Enable strict error handling for better security
set -euo pipefail
IFS=$'\n\t'  # Improved field separator to handle spaces in paths

# Configuration variables with proper quoting
BACKUP_DIR="${HOME}/kali_install_backups"
LOG_FILE="${HOME}/kali_install.log"
MENU_PACKAGE="kali-menu"
TEMP_DIR="$(mktemp -d)"
LOCK_FILE="/var/lock/h4xx.lock"

# Define color codes for visual formatting
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'    # No Color
BOLD='\033[1m'

# Progress animation characters
SPINNER="⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"

# Cleanup function to handle script termination
cleanup() {
    local exit_code=$?
    # Remove temporary files and lock file
    [ -d "${TEMP_DIR}" ] && rm -rf "${TEMP_DIR}"
    [ -f "${LOCK_FILE}" ] && rm -f "${LOCK_FILE}"
    # Restore terminal
    tput cnorm  # Show cursor
    exit ${exit_code}
}

# Set up cleanup trap for script exit
trap cleanup EXIT
trap 'exit 1' INT TERM

# Ensure single instance running
ensure_single_instance() {
    if [ -f "${LOCK_FILE}" ]; then
        pid=$(cat "${LOCK_FILE}")
        if kill -0 "${pid}" 2>/dev/null; then
            error "Another instance is running (PID: ${pid})"
            exit 1
        fi
    fi
    echo $$ > "${LOCK_FILE}"
}

# Enhanced display banner with proper EOF handling
display_banner() {
    clear_screen
    printf "%b" "${BLUE}"
    cat << "EOF"
██╗  ██╗██╗  ██╗██╗  ██╗██╗  ██╗
██║  ██║██║  ██║╚██╗██╔╝╚██╗██╔╝
███████║███████║ ╚███╔╝  ╚███╔╝ 
██╔══██║╚══███║ ██╔██╗  ██╔██╗ 
██║  ██║   ██║██╔╝ ██╗██╔╝ ██╗
╚═╝  ╚═╝   ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝
EOF
    printf "%b" "${NC}\n"
    printf "%b" "${YELLOW}=== Kali Linux Tools Installation Suite ===${NC}\n"
    printf "%b" "${BLUE}Version${NC}: ${GREEN}0.1-BETA${NC}\n"
    printf "%b" "${BLUE}Author${NC}: ${GREEN}0xb0rn3${NC}\n"
    printf "%b" "${BLUE}GitHub${NC}: ${GREEN}https://github.com/0xb0rn3${NC}\n"
    printf "%b" "${BLUE}Tool Name${NC}: ${GREEN}H4xx${NC}\n"
    printf "%b" "\n${YELLOW}====================================${NC}\n\n"
}

# Improved spinner with proper subprocess handling
show_spinner() {
    local pid=$1
    local message=$2
    local i=0
    local delay=0.1
    
    tput civis  # Hide cursor
    while ps -p "${pid}" > /dev/null 2>&1; do
        i=$(( (i + 1) % ${#SPINNER} ))
        printf "\r%b%s%b %s" "${BLUE}" "${SPINNER:$i:1}" "${NC}" "${message}"
        sleep "${delay}"
    done
    wait "${pid}" || true
    local exit_code=$?
    
    if [ ${exit_code} -eq 0 ]; then
        printf "\r%b✓%b %s\n" "${GREEN}" "${NC}" "${message}"
    else
        printf "\r%b✗%b %s\n" "${RED}" "${NC}" "${message}"
        return ${exit_code}
    fi
    tput cnorm  # Show cursor
}

# Status message functions with proper quoting
success() { printf "%b✓%b %s\n" "${GREEN}" "${NC}" "$1"; }
error() { printf "%b✗%b %s\n" "${RED}" "${NC}" "$1" >&2; }
info() { printf "%b%bℹ%b %s\n" "${BLUE}" "${BOLD}" "${NC}" "$1"; }
warn() { printf "%b⚠%b %s\n" "${YELLOW}" "${NC}" "$1"; }

# Enhanced repository checker with timeout
check_repo_exists() {
    local repo_url=$1
    local repo_name=$2
    local timeout=30
    
    if [ -d "${repo_name}" ]; then
        info "Repository ${repo_name} already exists. Updating..."
        (cd "${repo_name}" && timeout "${timeout}" git pull) &
        show_spinner $! "Updating ${repo_name}"
        return 0
    fi
    return 1
}

# Improved logging with proper file handling
log() {
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    printf "[H4xx v0.1-BETA][%s] %s\n" "${timestamp}" "$1" >> "${LOG_FILE}"
}

# Enhanced error handling with proper variable expansion
handle_error() {
    local error_msg="$1"
    local line_num="${2:-unknown}"
    error "${error_msg} (Line: ${line_num})"
    log "ERROR: ${error_msg} (Line: ${line_num})"
    
    if [ -f "${BACKUP_DIR}/sources.list" ]; then
        warn "Attempting to restore original sources.list..."
        cp "${BACKUP_DIR}/sources.list" /etc/apt/sources.list
        success "Restored original sources.list"
    fi
    
    exit 1
}

# Set up error trap with line number tracking
trap 'handle_error "An unexpected error occurred" ${LINENO}' ERR

# Improved screen clearing
clear_screen() {
    printf "\033[2J\033[H"
    display_banner
}

# Enhanced security checks with proper error handling
security_checks() {
    info "Performing security checks..."
    
    if [ "${EUID}" -ne 0 ]; then 
        handle_error "Please run as root" "${LINENO}"
    fi
    success "Root privileges verified"

    if [ ! -f "/etc/debian_version" ]; then
        handle_error "This script is for Debian-based systems only" "${LINENO}"
    fi
    success "Debian-based system verified"

    local available_space
    available_space=$(df -BG / | awk 'NR==2 {print $4}' | sed 's/G//')
    if [ "${available_space}" -lt 20 ]; then
        handle_error "Insufficient disk space. At least 20GB required" "${LINENO}"
    fi
    success "Sufficient disk space verified (${available_space}GB available)"
}

# Improved backup creation with error checking
setup_backup() {
    info "Setting up backup directory..."
    (
        mkdir -p "${BACKUP_DIR}"
        if [ -f /etc/apt/sources.list ]; then
            cp /etc/apt/sources.list "${BACKUP_DIR}/sources.list"
        else
            error "sources.list not found"
            return 1
        fi
    ) &
    show_spinner $! "Creating backup of system configuration"
    log "Created backup of sources.list at ${BACKUP_DIR}/sources.list"
}

# Enhanced repository configuration with proper checks
add_kali_repo() {
    info "Configuring Kali repository..."
    
    if grep -q "kali-rolling" /etc/apt/sources.list 2>/dev/null; then
        success "Kali repository already configured"
        return 0
    fi
    
    (printf "deb http://http.kali.org/kali kali-rolling main contrib non-free non-free-firmware\n" >> /etc/apt/sources.list) &
    show_spinner $! "Adding Kali repository"
    
    info "Importing Kali GPG key..."
    if ! apt-key list 2>/dev/null | grep -q "Kali Linux Repository"; then
        (
            wget -q -O "${TEMP_DIR}/archive-key.asc" https://archive.kali.org/archive-key.asc &&
            gpg --import "${TEMP_DIR}/archive-key.asc" &&
            gpg --export 44C6513A8E4FB3D30875F758ED444FF07D8D0BF6 | apt-key add -
        ) &
        show_spinner $! "Importing and verifying GPG key"
        success "GPG key imported and verified"
    else
        success "GPG key already present"
    fi
}

# Define tool categories with proper array declaration
declare -A categories=(
    ["kali-tools-information-gathering"]="Network scanning and enumeration tools"
    ["kali-tools-vulnerability"]="Vulnerability assessment tools"
    ["kali-tools-web"]="Web application testing tools"
    ["kali-tools-database"]="Database assessment tools"
    ["kali-tools-passwords"]="Password attacks and cracking tools"
    ["kali-tools-wireless"]="Wireless network testing tools"
    ["kali-tools-reverse-engineering"]="Reverse engineering tools"
    ["kali-tools-exploitation"]="Exploitation tools"
    ["kali-tools-social-engineering"]="Social engineering tools"
    ["kali-tools-sniffing-spoofing"]="Network sniffing and spoofing tools"
    ["kali-tools-post-exploitation"]="Post exploitation tools"
    ["kali-tools-forensics"]="Digital forensics tools"
    ["kali-tools-reporting"]="Report generation tools"
    ["kali-tools-crypto-stego"]="Cryptography and steganography tools"
    ["kali-tools-hardware"]="Hardware security tools"
    ["kali-tools-fuzzing"]="Fuzzing tools"
)

# Improved base package installation with error handling
install_base_requirements() {
    info "Installing base requirements..."
    (
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y \
            net-tools \
            network-manager \
            kde-plasma-desktop \
            iptables \
            "linux-headers-$(uname -r)" \
            "${MENU_PACKAGE}"
    ) &
    show_spinner $! "Installing base system requirements"
}

# Enhanced category installation with progress tracking
install_categories() {
    info "Installing Kali tool categories..."
    local total=${#categories[@]}
    local current=0
    
    for category in "${!categories[@]}"; do
        current=$((current + 1))
        info "[${current}/${total}] Installing: ${category} - ${categories[$category]}"
        (DEBIAN_FRONTEND=noninteractive apt-get install -y "${category}") &
        show_spinner $! "Installing ${category}"
    done
}

# Improved additional repository handling
handle_additional_repos() {
    info "Setting up additional components..."
    local current_dir
    current_dir=$(pwd)
    
    cd "${TEMP_DIR}" || handle_error "Failed to enter temporary directory" "${LINENO}"
    
    if ! check_repo_exists "https://github.com/0xb0rn3/kde-DBlot" "kde-DBlot"; then
        (git clone https://github.com/0xb0rn3/kde-DBlot) &
        show_spinner $! "Cloning KDE Debloat repository"
    fi
    
    if [ -d "kde-DBlot" ]; then
        (
            cd kde-DBlot || handle_error "Failed to enter kde-DBlot directory" "${LINENO}"
            chmod +x run
            ./run
        ) &
        show_spinner $! "Running KDE Debloat script"
    fi
    
    if ! check_repo_exists "https://github.com/Und3rf10w/kali-anonsurf.git" "kali-anonsurf"; then
        (git clone https://github.com/Und3rf10w/kali-anonsurf.git) &
        show_spinner $! "Cloning AnonSurf repository"
    fi
    
    if [ -d "kali-anonsurf" ]; then
        (
            cd kali-anonsurf || handle_error "Failed to enter kali-anonsurf directory" "${LINENO}"
            chmod +x installer.sh
            ./installer.sh
        ) &
        show_spinner $! "Installing AnonSurf"
    fi
    
    cd "${current_dir}" || handle_error "Failed to return to original directory" "${LINENO}"
}

# Enhanced documentation creation with proper file handling
create_documentation() {
    info "Creating installation documentation..."
    local doc_file="/root/kali_installation_report.md"
    
    (
    cat > "${doc_file}" << EOF
# H4xx - Kali Linux Tools Installation Report

## Tool Information
- Name: H4xx
- Version: 0.1-BETA
- Author: 0xb0rn3
- GitHub: https://github.com/0xb0rn3

## Installation Details
- Date: $(date)
- System: $(uname -a)
- Backup Location: ${BACKUP_DIR}

## Installed Categories
$(for category in "${!categories[@]}"; do
    printf "- **%s**: %s\n" "${category}" "${categories[$category]}"
done)

## Additional Components
- KDE Debloat utilities
- AnonSurf privacy tools
- Kali menu integration

## Usage Notes
1. AnonSurf can be used with \`anonsurf -h\` for anonymity features
2. All tools are installed for legitimate security testing only
3. Backup of original configuration is stored in ${BACKUP_DIR}

## Security Notice
These tools are intended for security research and educational purposes only.
Use responsibly and exclusively on systems you own or have explicit permission to test.

## Logs
Detailed installation logs can be found at: ${LOG_FILE}
EOF
    ) &
    show_spinner $! "Creating installation report"
}

# Enhanced main execution function with proper error handling
main() {
    ensure_single_instance
    clear_screen
    info "Starting H4xx Kali tools installation..."
    
    security_checks
    setup_backup
    add_kali_repo
    install_base_requirements
    install_categories
    handle_additional_repos
    
    info "Performing system cleanup..."
    (
        export DEBIAN_FRONTEND=noninteractive
        apt-get autoremove -y
        apt-get clean
    ) &
    show_spinner $! "Cleaning up system"
    
    create_documentation
    success "Installation completed successfully!"
    
    info "Installation report saved to /root/kali_installation_report.md"
    info "Use 'anonsurf -h' to view anonymity features"
    
    # Final system checks
    verify_installation
}

# Add verification function to ensure successful installation
verify_installation() {
    info "Performing final verification checks..."
    local verification_errors=0
    
    # Verify critical directories and files
    local check_paths=(
        "${BACKUP_DIR}"
        "${LOG_FILE}"
        "/root/kali_installation_report.md"
        "/etc/apt/sources.list"
    )
    
    for path in "${check_paths[@]}"; do
        if [ ! -e "${path}" ]; then
            error "Missing required path: ${path}"
            ((verification_errors++))
        fi
    done
    
    # Verify Kali repository configuration
    if ! grep -q "kali-rolling" /etc/apt/sources.list; then
        error "Kali repository not properly configured"
        ((verification_errors++))
    fi
    
    # Verify essential tool installations
    local essential_packages=(
        "net-tools"
        "network-manager"
        "kde-plasma-desktop"
        "iptables"
    )
    
    for package in "${essential_packages[@]}"; do
        if ! dpkg -l | grep -q "^ii.*${package}"; then
            error "Essential package not installed: ${package}"
            ((verification_errors++))
        fi
    done
    
    # Verify AnonSurf installation
    if ! command -v anonsurf >/dev/null 2>&1; then
        warn "AnonSurf installation may not be complete"
        # Don't increment errors as this is optional
    fi
    
    # Check system stability
    local load_average
    load_average=$(cut -d ' ' -f1 /proc/loadavg)
    if (( $(echo "${load_average} > 5" | bc -l) )); then
        warn "System load is high: ${load_average}"
    fi
    
    # Verify network connectivity
    if ! ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        warn "Network connectivity check failed"
    fi
    
    # Create final status report
    if [ ${verification_errors} -eq 0 ]; then
        success "All verification checks passed successfully"
        log "Installation verified successfully"
    else
        warn "Verification completed with ${verification_errors} errors"
        log "Installation verified with ${verification_errors} errors"
    fi
    
    # Display final summary
    cat << EOF

${BLUE}=== Installation Summary ===${NC}
• Installation Status: $([ ${verification_errors} -eq 0 ] && echo "${GREEN}Success${NC}" || echo "${RED}Completed with errors${NC}")
• Log Location: ${LOG_FILE}
• Documentation: /root/kali_installation_report.md
• Backup Location: ${BACKUP_DIR}

${YELLOW}Important Notes:${NC}
1. Use 'anonsurf start' to enable anonymous browsing
2. Check ${LOG_FILE} for detailed installation logs
3. Review /root/kali_installation_report.md for full documentation

${GREEN}Installation process completed${NC}
EOF
}

# Execute main function with error handling
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    trap cleanup EXIT
    trap 'error "Script interrupted"; exit 1' INT TERM
    
    main "$@" || {
        error "Installation failed"
        exit 1
    }
fi
